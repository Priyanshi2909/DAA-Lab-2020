Question: Write a program for implementation of quick sort without recursion.
Algorithm:
Partition(arr[],l,h)
1.	int x=arr[h]
2.	int i = (l-1)
3.	for(j=1;j<h-1;j++)
4.	      if(arr[j]<=x)
5.	         i++
6.	         temp = arr[i]
7.	         arr[i]=arr[j]
8.	         arr[j]=temp
9.	      End if
10.	 End for
11.	 temp = arr[i+1]
12.	 arr[i+1]=arr[h]
13.	 arr[h]=temp
14.	 return(i+1)
15.	 Stop.
QuickSortIterative(arr[],l,h)
1.	top = -1
2.	stack[++top] = l
3.	stack[++top] = h
4.	while(top>=0)
5.	    h= stack[top--]
6.	    l = stack[top--]
7.	    p= Partition(arr,l,h)
8.	    if(p-1 > l)
9.	          stack[++top] = l
10.	          stack[++top] = p-1
11.	     if(p+1 < h)
12.	          stack[++top] = p+1
13.	          stack[++top] = h
14.	  End while
15.	Stop.

Program:
#include <stdio.h>
#include<conio.h>
void swap(int* a, int* b) 
{ int t = *a; 
  *a = *b; 
   *b = t; 
} 
int partition(int arr[], int l, int h) 
{ int x = arr[h]; 
   int i = (l - 1); 
     for (int j = l; j <= h - 1; j++) { 
		if (arr[j] <= x) { 
			i++; 
			swap(&arr[i], &arr[j]); 
		} } 
	swap(&arr[i + 1], &arr[h]); 
	return (i + 1); 
} 
void quickSortIterative(int arr[], int l, int h) 
{ int stack[h - l + 1]; 
  int top = -1; 
  stack[++top] = l; 
  stack[++top] = h; 
  while (top >= 0) 
{ h = stack[top--]; 
l = stack[top--]; 
int p = partition(arr, l, h); 
if (p - 1 > l)
 { stack[++top] = l; 
 stack[++top] = p - 1; 
		} 
if (p + 1 < h)
{  stack[++top] = p + 1; 
  stack[++top] = h; 
		} } } 
void printArr(int arr[], int n) 
{           int i; 
	for (i = 0; i < n; ++i) 
		printf("%d ", arr[i]);
} 
void main() 
{         clrscr();   
           int arr[20],n;
	printf("\nEnter the no. of elements you want to enter: ");
	scanf("%d",&n);
	printf("\nEnter the array elements:");
	for(int i=0;i<n;i++)
	{    scanf("%d",&arr[i]);
	}
	quickSortIterative(arr, 0, n - 1); 
	printArr(arr, n); 
	getch();
}
